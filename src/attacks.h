#pragma once

#include "board.h"

#include <stdint.h>


struct Magic {
	uint64_t magic;
	uint64_t mask;
	uint64_t *table;
	int index;
};

extern Magic BISHOP_TABLES[64];
extern Magic ROOK_TABLES[64];

static const uint64_t KNIGHT_ATTACKS[64] = {
	0x20400, 0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 0xa01000, 0x402000, 
	0x2040004, 0x5080008, 0xa110011, 0x14220022, 0x28440044, 0x50880088, 0xa0100010, 0x40200020, 
	0x204000402, 0x508000805, 0xa1100110a, 0x1422002214, 0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040, 
	0x20400040200, 0x50800080500, 0xa1100110a00, 0x142200221400, 0x284400442800, 0x508800885000, 0xa0100010a000, 0x402000204000, 
	0x2040004020000, 0x5080008050000, 0xa1100110a0000, 0x14220022140000, 0x28440044280000, 0x50880088500000, 0xa0100010a00000, 0x40200020400000, 
	0x204000402000000, 0x508000805000000, 0xa1100110a000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000, 
	0x400040200000000, 0x800080500000000, 0x1100110a00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000, 
	0x4020000000000, 0x8050000000000, 0x110a0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10a00000000000, 0x20400000000000};

static const uint64_t KING_ATTACKS[64] = {
	0x0000000000000302, 0x0000000000000705, 0x000000000000e0a, 0x0000000000001c14, 0x0000000000003828, 0x7050, 0xe0a0, 0xc040, 
	0x30203, 0x70507, 0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0, 0xc040c0, 
	0x3020300, 0x7050700, 0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000, 
	0x302030000, 0x705070000, 0xe0a0e0000, 0x1c141c0000, 0x3828380000, 0x7050700000, 0xe0a0e00000, 0xc040c00000, 
	0x30203000000, 0x70507000000, 0xe0a0e000000, 0x1c141c000000, 0x382838000000, 0x705070000000, 0xe0a0e0000000, 0xc040c0000000, 
	0x3020300000000, 0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000, 0x38283800000000, 0x70507000000000, 0xe0a0e000000000, 0xc040c000000000, 
	0x302030000000000, 0x705070000000000, 0xe0a0e0000000000, 0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000, 
	0x203000000000000, 0x507000000000000, 0xa0e000000000000, 0x141c000000000000, 0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000};

static const uint64_t BISHOP_MAGICS[64] = {0x1210040600120048ull, 0x40802000120ull, 0x584480209240004ull, 0x2200c03001801ull, 0x4020065020000000ull, 0x280400300008ull, 0xa40902048b8029ull, 0x300548200a08a0ull, 
0x102200c200087060ull, 0x800104001042000aull, 0x4000240840008092ull, 0x20200234800ull, 0x40000488821023ull, 0x1484020809521040ull, 0x81210a0c00ull, 0x4c20281804060ull, 
0x2020000221030848ull, 0x420208010a009801ull, 0x5218300a8092200ull, 0x4002000082000800ull, 0x8008800042020000ull, 0x804408c00412ull, 0x1c92008826000ull, 0x8000a0001806022ull, 
0xa00482001c04208ull, 0x212602008226660ull, 0x800008000102000bull, 0x103300400e880080ull, 0x2200040400980100ull, 0x121100400021a00ull, 0x8501020850088880ull, 0x1100412027040500ull, 
0x420000c040a69ull, 0x242444002000d200ull, 0x5000022260411100ull, 0x80400d0800000806ull, 0x44000800410c300ull, 0x2004008080000800ull, 0x600802880002890ull, 0xc002400720300400ull, 
0x560400406829824ull, 0x4008082160124021ull, 0x8880ec0401000010ull, 0x1000208401300100ull, 0x5400a88008ull, 0x141438015010803ull, 0x42001001400a2ull, 0xc00014620008200cull, 
0x2080110804002040ull, 0x401c104011030ull, 0x922008400820000ull, 0x800880501001400ull, 0x208021018040000ull, 0x1009201202085aull, 0x802228410220010ull, 0x5080040028010004ull, 
0x1829040020021ull, 0x120080040100ull, 0x1300900280411022ull, 0x401080021080820ull, 0x2000000000420020ull, 0x400022004010480ull, 0x2000121040080034ull, 0x80000c8004000802ull};

static const uint64_t ROOK_MAGICS[64] = {0x8080006034400080ull, 0x2201103200085448ull, 0x400c0800401080ull, 0x200082002001084ull, 0x10001001018008cull, 0x5180048002004400ull, 0x2008880040092200ull, 0xa00008024004102ull, 
0x4002220210004080ull, 0x2080044010008ull, 0x802002110880ull, 0x100800100202ull, 0x800801008102ull, 0x35201002000102ull, 0x1000088490e00ull, 0x1231200400c804e4ull, 
0x10041020008001a0ull, 0x84d2640003060c0ull, 0x20000c100004a000ull, 0x588080804114050ull, 0x900800020808ull, 0x40424004000801ull, 0x421804003880102ull, 0x6804886008004100ull, 
0x884008024c00101ull, 0x1200040c00808ull, 0x10020001a500120ull, 0x1000100080022800ull, 0x802880011020110ull, 0x880c0004a0062009ull, 0x880c40008028aull, 0x43250090001d00ull, 
0x410020040440080ull, 0xa04800200110ull, 0x210010424009c1ull, 0xc12408828050008ull, 0x8088000e0100200ull, 0x44000800201ull, 0x240480160100ull, 0x21048001208240ull, 
0x8280407101470080ull, 0x400808c280124001ull, 0x1401008004140220ull, 0x41010c008018005ull, 0x2000100840041040ull, 0x10040006010028ull, 0x100080084440001ull, 0x8009002c2208001ull, 
0x2002080010200120ull, 0x40080020100810ull, 0xc282051020024ull, 0x4848010500904ull, 0x401808000a461500ull, 0x2206040002004090ull, 0x48480020090010aull, 0xa010050e080ull, 
0x8200408002b10021ull, 0x90010020098011c2ull, 0x802510082041ull, 0x4088208200c0060aull, 0x100100100228000full, 0x8002110014000489ull, 0x420081041208204ull, 0x8200540280610042ull};



bool isSquareAttacked(Board *board, bool turn, int square);
uint64_t slidingAttacks(Board *board, int square, uint64_t mask);
uint64_t slidingAttacks(uint64_t occupied, int square, uint64_t mask);
uint64_t getAttacks(Board *board, bool turn);
uint64_t pawnAttacks(Board *board, bool turn);
uint64_t knightAttacks(Board *board, bool turn);
uint64_t bishopAttacks(uint64_t occupied, int square);
uint64_t bishopAttacks(Board *board, bool turn);
uint64_t rookAttacks(uint64_t occupied, int square);
uint64_t rookAttacks(Board *board, bool turn);
uint64_t queenAttacks(Board *board, bool turn);
uint64_t kingAttacks(Board *board, bool turn);
void initSlidingAttacks();
