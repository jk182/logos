#pragma once

#include "board.h"

#include <stdint.h>


struct Magic {
	uint64_t magic;
	uint64_t mask;
	uint64_t *table;
};

static const uint64_t KNIGHT_ATTACKS[64] = {
	0x20400, 0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 0xa01000, 0x402000, 
	0x2040004, 0x5080008, 0xa110011, 0x14220022, 0x28440044, 0x50880088, 0xa0100010, 0x40200020, 
	0x204000402, 0x508000805, 0xa1100110a, 0x1422002214, 0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040, 
	0x20400040200, 0x50800080500, 0xa1100110a00, 0x142200221400, 0x284400442800, 0x508800885000, 0xa0100010a000, 0x402000204000, 
	0x2040004020000, 0x5080008050000, 0xa1100110a0000, 0x14220022140000, 0x28440044280000, 0x50880088500000, 0xa0100010a00000, 0x40200020400000, 
	0x204000402000000, 0x508000805000000, 0xa1100110a000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000, 
	0x400040200000000, 0x800080500000000, 0x1100110a00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000, 
	0x4020000000000, 0x8050000000000, 0x110a0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10a00000000000, 0x20400000000000};

static const uint64_t KING_ATTACKS[64] = {
	0x0000000000000302, 0x0000000000000705, 0x000000000000e0a, 0x0000000000001c14, 0x0000000000003828, 0x7050, 0xe0a0, 0xc040, 
	0x30203, 0x70507, 0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0, 0xc040c0, 
	0x3020300, 0x7050700, 0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000, 
	0x302030000, 0x705070000, 0xe0a0e0000, 0x1c141c0000, 0x3828380000, 0x7050700000, 0xe0a0e00000, 0xc040c00000, 
	0x30203000000, 0x70507000000, 0xe0a0e000000, 0x1c141c000000, 0x382838000000, 0x705070000000, 0xe0a0e0000000, 0xc040c0000000, 
	0x3020300000000, 0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000, 0x38283800000000, 0x70507000000000, 0xe0a0e000000000, 0xc040c000000000, 
	0x302030000000000, 0x705070000000000, 0xe0a0e0000000000, 0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000, 
	0x203000000000000, 0x507000000000000, 0xa0e000000000000, 0x141c000000000000, 0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000};

static const uint64_t BISHOP_MAGICS[64] = {0x203481108000c10ull, 0x250a808001010400ull, 0x588408020801c54ull, 0x881024002831a000ull, 0x2011c01000004101ull, 0x2000082062410000ull, 0x141d101004020cull, 0x8100200010000260ull, 
0x404490102802a00ull, 0x13400540001ull, 0x61e280100114ull, 0xa832820008012ull, 0x8010002000584004ull, 0x2080035028810010ull, 0x1625248001008400ull, 0x110800002001000cull, 
0x421090c040101ull, 0x40040080800900ull, 0x402801102041021ull, 0x20411400e4610000ull, 0x188002260084ull, 0x2c044008019081ull, 0x5001080202040200ull, 0x380080200600c0ull, 
0x1080a08840018050ull, 0x404040240040822ull, 0x20400302200ull, 0x406420804010424ull, 0x18141204800ull, 0x80040131820100ull, 0x408003804800091ull, 0x10110608082000cull, 
0x8450d18240240080ull, 0x809080041002084ull, 0x32090404009002ull, 0x800013c10084012ull, 0x8040080018080ull, 0x482100089521008ull, 0x1040004802482c84ull, 0x20008001000001aull, 
0xa002100000c40081ull, 0x40200030089ull, 0x40090090009a0008ull, 0x20102042001020ull, 0x802408002200200ull, 0x804442028002a80ull, 0xb81200030809606ull, 0x20c0400110400080ull, 
0x4000045081000800ull, 0x9050510208004cull, 0x4000000021801801ull, 0x209400280020000ull, 0x240000048100120ull, 0x4020860282000ull, 0x4000010485200080ull, 0x148401c0000c06ull, 
0x410020068729ull, 0x620004c4210200ull, 0x440000009800400ull, 0xa00024080000a202ull, 0x10010420222a0009ull, 0x20840404004c004ull, 0x48004820904ull, 0x404000a020020080ull};

static const uint64_t ROOK_MAGICS[64] = {0x23d80c028000804ull, 0xaa02002000401ull, 0x804200a100c3c00ull, 0x4042020000400801ull, 0x502000084002002ull, 0x210204000100240ull, 0x4054208200001500ull, 0x4021001040201090ull, 
0x48848001002ull, 0x104c088040040100ull, 0x402200001c8809cull, 0xa2001800101013ull, 0xb241801001000500ull, 0x90c012020180801ull, 0x90d012800200ull, 0x920014000b81100ull, 
0x4008010416010231ull, 0x40c0800480202420ull, 0x6020802801a2110ull, 0x910041000a000204ull, 0x8a02804800003400ull, 0x401208510010ull, 0x4811008000488200ull, 0x82009200050ull, 
0x240880014080044ull, 0x2800120201814040ull, 0x4023800110000aa3ull, 0x201041000400240ull, 0x240004830010010ull, 0x4c080101006184c0ull, 0x2400408810340ull, 0x81098040020320ull, 
0x8100048280240100ull, 0xc4a402800820004ull, 0x2802a20f8840ull, 0x410008121000c050ull, 0x1010082060031aull, 0x20008c0100120084ull, 0x400260840100020ull, 0x1258008014206ull, 
0x418104020000200ull, 0x2001022a4044208ull, 0xc9000a0041400ull, 0x10000040009100ull, 0x101089008001080ull, 0x122008000a809c00ull, 0x4400820000812020ull, 0x804220746530a9ull, 
0x8410038006121020ull, 0x2040400110310ull, 0x4001004081043008ull, 0xa3008040118202ull, 0x20214112630080ull, 0x1045081100020aull, 0xc81088018288ull, 0x900100803a5010ull, 
0x80110602041c0442ull, 0x80a00a1064412ull, 0x268744c00801aac1ull, 0x8348008100481a02ull, 0x8d481000049ull, 0x10402088010146c9ull, 0x528180c080110c2ull, 0x808c02289040422ull};



bool isSquareAttacked(Board board, bool turn, int square);
uint64_t slidingAttacks(Board *board, bool turn, int square, uint64_t mask);
uint64_t slidingAttacks(uint64_t occupied, int square, uint64_t mask);
uint64_t getAttacks(Board board, bool turn);
uint64_t pawnAttacks(Board *board, bool turn);
uint64_t knightAttacks(Board *board, bool turn);
uint64_t bishopAttacks(Board *board, bool turn);
uint64_t rookAttacks(Board *board, bool turn);
uint64_t queenAttacks(Board *board, bool turn);
uint64_t kingAttacks(Board *board, bool turn);
void initSlidingAttacks();
